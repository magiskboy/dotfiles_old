export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="nkthanh"

plugins=(
  git
  git-prompt
  git-auto-fetch
  gitignore
  pipenv
  pyenv
  django
  golang
  virtualenv
  mvn
  docker
  kubectl
  vi-mode
  jsontools
  zsh-autosuggestions
  zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh
source $HOME/workspace/dotfiles/scripts/timer.plugin.zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export PATH=$HOME/.local/bin:$PATH
export PYTHONDONTWRITEBYTECODE=1
export JAVA_HOME=$(java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home' | cut -d'=' -f2 | xargs)
export PATH=$JAVA_HOME/bin:$PATH
export GOPATH=$HOME/workspace/go
export PATH=$HOME/.local/go/bin:$GOPATH:$GOPATH/bin:$PATH
export TERM=xterm-256color
export TERMINFO=/usr/share/terminfo
export PYENV_EXTENSION="-env"
export PYENV_ROOT="$HOME/.pyenv"
export PATH=$PYENV_ROOT/bin:$PATH
export PIPENV_PYTHON="$PYENV_ROOT/shims/python"
export VIRTUAL_ENV_DISABLE_PROMPT=1

alias genssl="openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout cert.key -out cert.crt"
alias -s {yml,yaml,ts,jsx,html,txt,c,cpp,java,go,md,json,Dockerfile,gitignore,dockerignore,zsh}=nvim
alias reload="exec \"$SHELL\""
alias md="mkdir"
alias rmwp="find . -type f -name '*.py' -exec sed -i '' 's/[[:space:]]\{1,\}$//' {} \+"
alias f="fzf --preview=\"bat {} --color=always --theme=\"Monokai Extended Origin\"\""
alias gh="git rev-parse --short HEAD"
alias themes="bash -c  \"$(wget -qO- https://git.io/vQgMr)\""

eval "$(pyenv init -)"
eval "$(pipenv --completion)"

function get_py_version() {
    # python -V 2>&1 | sed 's/.* \([0-9]\).\([0-9]\)\(.*\)/\1.\2\3/'
    pyenv version-name
}

function background_job() {
    bg_job=$(jobs | tail -n 1 | sed 's/.*  \(.*\)/\1/')
    [ ! -z $bg_job ] && echo $bg_job
}

function search() {
    k="$@"
    files=$(rg -l $k)
    [ ! -z $files ] && fzf --preview "bat {} --color=always" --bind "enter:execute(nvim {})" <<< $files
}

function runtest() {
    branch=$1
    submit=$2
    for file in $(rg -l "SC-$branch"); do
        if [[ ! -z $submit ]]; then
            pytest $file --submit
        else
            pytest $file
        fi
    done
}
